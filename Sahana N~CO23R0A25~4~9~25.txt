1. what do mean by java?

		Java is a highlevel object oriented programming language and it is a platform independent.

2. what is bytecode?
	set of information of bits.(1byte=8bits)
		
3. Explain the architecture of JDK

		1.JDK-
			-Java Development Kit.
			-It is a Software development where it is used to write and execute the java programs.
			-Where it contains JRE and Built tools like (java,javac,javadoc,jars ....).
			-The java and javac is located in JDK inside the bin folder.
			-It is a platform dependent.
		2. JRE-
			-JAVA Runtime Environment.
			-It provides an environment and then it will run the java programs.
			-It contains JVM and a Set of libraries.
			-It is a platform dependent.
		3. JVM-
			-Java Virtual machine.
			-The JVM is a virtual machine ,were it is not physically .Once the source code has converted into bytecode,
				The JVM will be launched.After that JVM will interpret the bytecode (line by line ) and then converts the bytecode to 0's and 1's (machine understandable).
			-It is a platform dependent.
			-where the bytecode is platform independent.


4.what all the operations does JVM do?

		1.After the bytecode has been generated , the JVM will launched
		2.classLoader-It will loads the class (Program)
		3.It will verify the bytecode line by line and then
		4.Executes the bytecode


5. what do you mean by variables, and explain its types

		variables are the reference type ,to store the memory address of the value  (or) a name given to the memory address of value.
		
			4Types
			1.Local variables:
				The variables are declared or initialized in the level of method only.
			2.static variables
				The variables are declared or initialized in the level of class only.
			3.Nonstatic variables
			4.Parameterized variables


6. what do you mean by datatypes,list the difference between primitive and non-primitive datatype, mention size of all datatypes
		
		It is a type of data where the variables are refers to it.
			Have 2 types
			1.primitive  datatype
				They are pre-defined and built in .
				It is fixed size.
                        2.Non-primitive datatype
				they are predefined and user defined.
				It doesn't have fixed size.
				Object-referenced
		1.primitive datatype                                             2.Object-referenced datatype
			byte-1byte-8bits(-128 to +127)                                    String,array,custom classes
			short-2byte-16bits
			int-4-32bits
			long-8-64bits
			double-8-64bits
			float-4-32bits
			char-2-16bits
			boolean-1byte


7. what is array,give an example(with program)

		Collection of elements of the same data type
		Syntax:
			datatype[] variablename=value;
		Example:
			String[] name={"Sora","V","Nandu","Jk"};
	PROGRAM:

		class Name{
		String[] names={"Sora","V","Nandu","Jk"};
		int[]  numbers={7,23,86,12};
		public static void main(String[] args){
		System.out.println("The Student names are : " + names);
		System.out.println("Numbers are : " + numbers);
		}
		}


8.difference between local and static variables and their scopes.

	1.LOCAL VARIABLE:
		The variables are declared or initialized in the level of main method only.
		Scope: To declare or initialized only in main method.
		cannot declare outside the main method.

	2.STATIC VARIABLE:
		The variables are declared or initialized in the level of class only.
		Scope:To declare or initialized only in the class level.
		Cannot reassign the values.(eg. static int price=10;   price=20;)


9.what do mean by methods

		Methods are the block of code , that perform a specific or particular task.


10.what do mean by static methods,Illustrate with an example

		where it has declared in the class level.
			Eg.
				class Numberss {
					static int number=77;
					static String name="Ram";
					static long phoneNumber=6723894512l;
					static double n1=34.66;
				public static void firstNumberEntered(){
					 int value=40;
					System.out.println("The First number entered.. : " +value);
				}
				public static void main(String[] args){
				System.out.println("Numbers are : " + number);
				System.out.println("Name is : " + name);
				System.out.println("The phoneNumber : " + phoneNumber);
				System.out.println("n1 : " + n1);
				firstNumberEntered();
				}
				}




11.what do mean by method chaining and give an example(with program)

			The chaining of different methods in a single line instead of others methods with same object referenced separately.
			Eg.
				class College{
				public static void joinedToCollege(){
				System.out.println("Firstly joined to college ");
				inFirstYear();
				}
				public static void inFirstYear(){
				System.out.println("In first Year , I learned the basics of programs,physcis and soon...");
				passedToSecondYear();
				}
				public static void passedToSecondYear(){
				System.out.println("In this , well learned and have a final exams ");
				holidays();
				}
				public static void holidays(){
				System.out.println("Well done in exams and enjoyed holidays, then back to college");
				}
				public static void finalYear(){
				System.out.println("Preparing for jobs and then submitting the final projects ");
				}
				public static void main(String[] args){
				joinedToCollege();
				}
				}



12.what do mean by default values and who provides default values
   
			Default values:
				The JVM has already defined the default values.
				JVM provides Default values.


13.write a program to illustrate local and static variables
	
		1.LOCAL VARIABLE:
		class Colors{
		public static void main(String[] args){
			int price=30;
			String color="pink";
			System.out.println("The cost of color is : " + price);
			System.out.println("The color Name is ==> :" + color); 
			
		}
		}


		2.STATIC VARIABLE:

			class Bank{
			static String bankName="SBI";
			static int balanceAmt=1000;
			static char x=66;
			static boolean isAvaliable=true;
			public static void main(String[] args){
			System.out.println("The BANK name is : " + bankName);
			System.out.println("The balance Amount is : " + balanceAmt);
			System.out.println("Their number : " + x);
			System.out.println("Is Available : " + isAvaliable);
}
}